package src {		import flash.display.Sprite;		import flash.events.Event;	import flash.events.FullScreenEvent;	import flash.events.MouseEvent;		import flash.display.Stage;	import flash.display.StageScaleMode;	import flash.display.StageAlign;	import flash.display.StageDisplayState;		import flash.utils.setTimeout;	import flash.external.ExternalInterface;		import caurina.transitions.Tweener;		import src.video.VideoDisplay;	import src.events.VideoDisplayEvent;	import src.ui.FullScreenButton;		public class VideoElement extends Sprite {						// VIDEO MODULES				private var videoDisplay:VideoDisplay;		private var fullscreenButton:FullScreenButton;		//private var videoController:VideoController;				// NUMBER VARIABLES				private var videoPercent:Number;				// STRING VARIABLES				private var playerId:String;		private var pauseImage:String;				// BOOLEANS				private var isFullScreen:Boolean;						// CONSTRUCTOR				public function VideoElement() {						stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			stage.addEventListener(Event.RESIZE, stageResize);			stage.addEventListener(FullScreenEvent.FULL_SCREEN, onFullscreen);						isFullScreen = false;						if (this.loaderInfo.parameters.id !== undefined) {                playerId = this.loaderInfo.parameters.id;				pauseImage = this.loaderInfo.parameters.pauseImage;            }						// VIDEO DISPLAY						videoDisplay = new VideoDisplay(stage.stageWidth, stage.stageHeight, pauseImage);						videoDisplay.addEventListener(VideoDisplayEvent.VIDEO_COMPLETE, videoStopped);			videoDisplay.addEventListener(VideoDisplayEvent.VIDEO_LOADING, videoLoading);			videoDisplay.addEventListener(VideoDisplayEvent.VIDEO_LOADED, videoLoaded);			videoDisplay.addEventListener(VideoDisplayEvent.PLAY_PROGRESS, playProgress);			videoDisplay.addEventListener(VideoDisplayEvent.VIDEO_PLAYING, videoPlaying);			videoDisplay.addEventListener(VideoDisplayEvent.VIDEO_PAUSED, videoPaused);			videoDisplay.addEventListener(VideoDisplayEvent.META_DATA_LOADED, metaDataLoaded);			videoDisplay.addEventListener(VideoDisplayEvent.VIDEO_ERROR, videoError);			//videoDisplay.addEventListener(VideoDisplayEvent.CONNECTION_MADE, connectionMade);						fullscreenButton = new FullScreenButton();			fullscreenButton.x = stage.stageWidth - 40;			fullscreenButton.y = 10;			fullscreenButton.addEventListener(MouseEvent.CLICK, toggleFullscreen);						addChild(videoDisplay);						addChild(fullscreenButton);						//videoDisplay.setServer("rtmp://dvip.smhcdn.com/10225/");//			loadVideo("0_3q6k6uoi_0_yypa0e1h_1.mp4");//			playVideo();						// EXTERNAL INTERFACE						initializeExternalInterface();					}						// INITIALIZE EXTERNAL INTERFACE				private function initializeExternalInterface():void {						if (ExternalInterface.available) {							ExternalInterface.addCallback("playVideo", playVideo);				ExternalInterface.addCallback("pauseVideo", pauseVideo);							ExternalInterface.addCallback("setServer", setServer);						   	ExternalInterface.addCallback("loadVideo", loadVideo);				ExternalInterface.addCallback("chapterSeek", chapterSeek);								ExternalInterface.addCallback("videoComplete", videoComplete);								ExternalInterface.addCallback("muteVideo", muteVideo);				ExternalInterface.addCallback("unmuteVideo", unmuteVideo);								ExternalInterface.addCallback("videoSeek", videoSeek);			   			   	var functionName:String = playerId + "FlashReady";				ExternalInterface.call("dynamicFunctionCall", functionName);			   		  	} else {			  	trace("ERROR: External Interface COULD NOT BE Initialized...");		  	} 		}						// JAVASCRIPT INTERFACE				private function setServer(str:String):void {			videoDisplay.setServer(str);		}				private function loadVideo(str:String):String {			return videoDisplay.loadVideo(str);		}				private function chapterSeek(str:String):void {			var newProgress = parseFloat(str);			videoDisplay.chapterSeek(newProgress);		}				private function videoComplete():void {			videoDisplay.videoComplete();		}				private function playVideo():String {			return videoDisplay.playVideo();		}				private function pauseVideo():void {			videoDisplay.pauseVideo();		}				private function muteVideo():void {			videoDisplay.muteVideo();		}				private function unmuteVideo():void {			videoDisplay.unmuteVideo();		}				private function videoSeek(str:String):void {			var newProgress = parseFloat(str);			videoDisplay.videoSeek(newProgress);		}				private function toggleFullscreen(e:MouseEvent):void {						trace("INFO: toggleFullscreen: " + isFullScreen);						if (isFullScreen) {				exitFullscreen();				isFullScreen = false;			}			else {				enterFullscreen();				isFullScreen = true;			}		}						// JAVASCRIPT EVENT DISPATCHER				private function videoStopped(evt:VideoDisplayEvent):void {			var functionName:String = playerId + "VideoStopped";			ExternalInterface.call("dynamicFunctionCall", functionName);		}				private function videoLoading(evt:VideoDisplayEvent):void {			var functionName:String = playerId + "VideoLoading";			ExternalInterface.call("dynamicFunctionCall", functionName);		}				private function videoLoaded(evt:VideoDisplayEvent):void {			var functionName:String = playerId + "VideoLoaded";			ExternalInterface.call("dynamicFunctionCall", functionName);		}				private function playProgress(evt:VideoDisplayEvent):void {			var returnValue = evt.playPercent + "," + evt.playTotal + "," + evt.buffered;			var functionName:String = playerId + "VideoProgress";			ExternalInterface.call("dynamicFunctionCall", functionName, returnValue);		}				private function videoPlaying(evt:VideoDisplayEvent):void {			var functionName:String = playerId + "VideoPlaying";			ExternalInterface.call("dynamicFunctionCall", functionName);		}				private function videoPaused(evt:VideoDisplayEvent):void {			var functionName:String = playerId + "VideoPaused";			ExternalInterface.call("dynamicFunctionCall", functionName);		}				private function videoError(evt:VideoDisplayEvent):void {			var functionName:String = playerId + "VideoError";			ExternalInterface.call("dynamicFunctionCall", functionName);		}				private function metaDataLoaded(evt:VideoDisplayEvent):void {			var functionName:String = playerId + "MetaData";			ExternalInterface.call("dynamicFunctionCall", functionName, evt.currentDuration);		}				// STAGE RESIZING				private function stageResize(evt:Event):void {			//videoController.y = stage.stageHeight - 65;			//videoController.format(stage.stageWidth);			fullscreenButton.x = stage.stageWidth - 40;			fullscreenButton.y = 10;			videoDisplay.format(stage.stageWidth, stage.stageHeight);		}				private function enterFullscreen():void {			stage.displayState = StageDisplayState.FULL_SCREEN;		}				private function exitFullscreen():void {			stage.displayState = StageDisplayState.NORMAL;		}				private function onFullscreen(e:FullScreenEvent):void {						if (e.fullScreen == false) {				trace("INFO: Main: onFullscreen: stage display change = NORMAL");				videoDisplay.setVideoNormalScreen();				fullscreenButton.setNormal();							} else {				trace("INFO: Main: onFullscreen: stage display change = FULL_SCREEN");				videoDisplay.setVideoFullScreen();				fullscreenButton.setFull();			}		}			}}